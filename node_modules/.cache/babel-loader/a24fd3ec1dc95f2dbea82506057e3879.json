{"ast":null,"code":"import * as imageConversion from 'image-conversion';\nexport default {\n  created() {\n    const path = this.$route.path;\n    const arr = path.split('/');\n    const articleId = arr[2];\n\n    if (articleId) {\n      this.axios.get('/api/admin/articles/' + articleId).then(({\n        data\n      }) => {\n        this.article = data.data;\n      });\n    } else {\n      const article = sessionStorage.getItem('article');\n\n      if (article) {\n        this.article = JSON.parse(article);\n      }\n    }\n  },\n\n  destroyed() {\n    this.autoSaveArticle();\n  },\n\n  data: function () {\n    return {\n      addOrEdit: false,\n      autoSave: true,\n      categoryName: '',\n      tagName: '',\n      categorys: [],\n      tagList: [],\n      typeList: [{\n        type: 1,\n        desc: '原创'\n      }, {\n        type: 2,\n        desc: '转载'\n      }, {\n        type: 3,\n        desc: '翻译'\n      }],\n      article: {\n        id: null,\n        articleTitle: this.$moment(new Date()).format('YYYY-MM-DD'),\n        articleContent: '',\n        articleCover: '',\n        categoryName: null,\n        tagNames: [],\n        isTop: 0,\n        type: 1,\n        status: 1\n      },\n      headers: {\n        Authorization: 'Bearer ' + sessionStorage.getItem('token')\n      }\n    };\n  },\n  methods: {\n    listCategories() {\n      this.axios.get('/api/admin/categories/search').then(({\n        data\n      }) => {\n        this.categorys = data.data;\n      });\n    },\n\n    listTags() {\n      this.axios.get('/api/admin/tags/search').then(({\n        data\n      }) => {\n        this.tagList = data.data;\n      });\n    },\n\n    openModel() {\n      if (this.article.articleTitle.trim() == '') {\n        this.$message.error('文章标题不能为空');\n        return false;\n      }\n\n      if (this.article.articleContent.trim() == '') {\n        this.$message.error('文章内容不能为空');\n        return false;\n      }\n\n      this.listCategories();\n      this.listTags();\n      this.addOrEdit = true;\n    },\n\n    uploadCover(response) {\n      this.article.articleCover = response.data;\n    },\n\n    beforeUpload(file) {\n      return new Promise(resolve => {\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\n          resolve(file);\n        }\n\n        imageConversion.compressAccurately(file, this.config.UPLOAD_SIZE).then(res => {\n          resolve(res);\n        });\n      });\n    },\n\n    uploadImg(pos, file) {\n      var formdata = new FormData();\n\n      if (file.size / 1024 < this.config.UPLOAD_SIZE) {\n        formdata.append('file', file);\n        this.axios.post('/api/admin/articles/images', formdata).then(({\n          data\n        }) => {\n          this.$refs.md.$img2Url(pos, data.data);\n        });\n      } else {\n        imageConversion.compressAccurately(file, this.config.UPLOAD_SIZE).then(res => {\n          formdata.append('file', new window.File([res], file.name, {\n            type: file.type\n          }));\n          this.axios.post('/api/admin/articles/images', formdata).then(({\n            data\n          }) => {\n            this.$refs.md.$img2Url(pos, data.data);\n          });\n        });\n      }\n    },\n\n    saveArticleDraft() {\n      if (this.article.articleTitle.trim() == '') {\n        this.$message.error('文章标题不能为空');\n        return false;\n      }\n\n      if (this.article.articleContent.trim() == '') {\n        this.$message.error('文章内容不能为空');\n        return false;\n      }\n\n      this.article.status = 3;\n      this.axios.post('/api/admin/articles', this.article).then(({\n        data\n      }) => {\n        if (data.flag) {\n          if (this.article.id === null) {\n            this.$store.commit('removeTab', '发布文章');\n          } else {\n            this.$store.commit('removeTab', '修改文章');\n          }\n\n          sessionStorage.removeItem('article');\n          this.$router.push({\n            path: '/article-list'\n          });\n          this.$notify.success({\n            title: '成功',\n            message: '保存草稿成功'\n          });\n        } else {\n          this.$notify.error({\n            title: '失败',\n            message: '保存草稿失败'\n          });\n        }\n      });\n      this.autoSave = false;\n    },\n\n    saveOrUpdateArticle() {\n      if (this.article.articleTitle.trim() == '') {\n        this.$message.error('文章标题不能为空');\n        return false;\n      }\n\n      if (this.article.articleContent.trim() == '') {\n        this.$message.error('文章内容不能为空');\n        return false;\n      }\n\n      if (this.article.categoryName == null) {\n        this.$message.error('文章分类不能为空');\n        return false;\n      }\n\n      if (this.article.tagNames.length == 0) {\n        this.$message.error('文章标签不能为空');\n        return false;\n      }\n\n      if (this.article.articleCover.trim() == '') {\n        this.$message.error('文章封面不能为空');\n        return false;\n      }\n\n      this.axios.post('/api/admin/articles', this.article).then(({\n        data\n      }) => {\n        if (data.flag) {\n          if (this.article.id === null) {\n            this.$store.commit('removeTab', '发布文章');\n          } else {\n            this.$store.commit('removeTab', '修改文章');\n          }\n\n          sessionStorage.removeItem('article');\n          this.$router.push({\n            path: '/article-list'\n          });\n          this.$notify.success({\n            title: '成功',\n            message: data.message\n          });\n        } else {\n          this.$notify.error({\n            title: '失败',\n            message: data.message\n          });\n        }\n\n        this.addOrEdit = false;\n      });\n      this.autoSave = false;\n    },\n\n    autoSaveArticle() {\n      if (this.autoSave && this.article.articleTitle.trim() != '' && this.article.articleContent.trim() != '' && this.article.id != null) {\n        this.axios.post('/api/admin/articles', this.article).then(({\n          data\n        }) => {\n          if (data.flag) {\n            this.$notify.success({\n              title: '成功',\n              message: '自动保存成功'\n            });\n          } else {\n            this.$notify.error({\n              title: '失败',\n              message: '自动保存失败'\n            });\n          }\n        });\n      }\n\n      if (this.autoSave && this.article.id == null) {\n        sessionStorage.setItem('article', JSON.stringify(this.article));\n      }\n    },\n\n    searchCategories(keywords, cb) {\n      this.axios.get('/api/admin/categories/search', {\n        params: {\n          keywords: keywords\n        }\n      }).then(({\n        data\n      }) => {\n        cb(data.data);\n      });\n    },\n\n    handleSelectCategories(item) {\n      this.addCategory({\n        categoryName: item.categoryName\n      });\n    },\n\n    saveCategory() {\n      if (this.categoryName.trim() != '') {\n        this.addCategory({\n          categoryName: this.categoryName\n        });\n        this.categoryName = '';\n      }\n    },\n\n    addCategory(item) {\n      this.article.categoryName = item.categoryName;\n    },\n\n    removeCategory() {\n      this.article.categoryName = null;\n    },\n\n    searchTags(keywords, cb) {\n      this.axios.get('/api/admin/tags/search', {\n        params: {\n          keywords: keywords\n        }\n      }).then(({\n        data\n      }) => {\n        cb(data.data);\n      });\n    },\n\n    handleSelectTag(item) {\n      this.addTag({\n        tagName: item.tagName\n      });\n    },\n\n    saveTag() {\n      if (this.tagName.trim() != '') {\n        this.addTag({\n          tagName: this.tagName\n        });\n        this.tagName = '';\n      }\n    },\n\n    addTag(item) {\n      if (this.article.tagNames.indexOf(item.tagName) == -1) {\n        this.article.tagNames.push(item.tagName);\n      }\n    },\n\n    removeTag(item) {\n      const index = this.article.tagNames.indexOf(item);\n      this.article.tagNames.splice(index, 1);\n    }\n\n  },\n  computed: {\n    tagClass() {\n      return function (item) {\n        const index = this.article.tagNames.indexOf(item.tagName);\n        return index != -1 ? 'tag-item-select' : 'tag-item';\n      };\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA2IA;AACA;EACAA;IACA;IACA;IACA;;IACA;MACA;QAAAC;MAAA;QACA;MACA,CAFA;IAGA,CAJA,MAIA;MACA;;MACA;QACA;MACA;IACA;EACA,CAfA;;EAgBAC;IACA;EACA,CAlBA;;EAmBAD;IACA;MACAE,gBADA;MAEAC,cAFA;MAGAC,gBAHA;MAIAC,WAJA;MAKAC,aALA;MAMAC,WANA;MAOAC,WACA;QACAC,OADA;QAEAC;MAFA,CADA,EAKA;QACAD,OADA;QAEAC;MAFA,CALA,EASA;QACAD,OADA;QAEAC;MAFA,CATA,CAPA;MAqBAC;QACAC,QADA;QAEAC,2DAFA;QAGAC,kBAHA;QAIAC,gBAJA;QAKAX,kBALA;QAMAY,YANA;QAOAC,QAPA;QAQAR,OARA;QASAS;MATA,CArBA;MAgCAC;QAAAC;MAAA;IAhCA;EAkCA,CAtDA;EAuDAC;IACAC;MACA;QAAAtB;MAAA;QACA;MACA,CAFA;IAGA,CALA;;IAMAuB;MACA;QAAAvB;MAAA;QACA;MACA,CAFA;IAGA,CAVA;;IAWAwB;MACA;QACA;QACA;MACA;;MACA;QACA;QACA;MACA;;MACA;MACA;MACA;IACA,CAvBA;;IAwBAC;MACA;IACA,CA1BA;;IA2BAC;MACA;QACA;UACAC;QACA;;QACAC;UACAD;QACA,CAFA;MAGA,CAPA;IAQA,CApCA;;IAqCAE;MACA;;MACA;QACAC;QACA;UAAA9B;QAAA;UACA;QACA,CAFA;MAGA,CALA,MAKA;QACA4B;UACAE;YAAArB;UAAA;UACA;YAAAT;UAAA;YACA;UACA,CAFA;QAGA,CALA;MAMA;IACA,CApDA;;IAqDA+B;MACA;QACA;QACA;MACA;;MACA;QACA;QACA;MACA;;MACA;MACA;QAAA/B;MAAA;QACA;UACA;YACA;UACA,CAFA,MAEA;YACA;UACA;;UACAgC;UACA;YAAAC;UAAA;UACA;YACAC,WADA;YAEAC;UAFA;QAIA,CAZA,MAYA;UACA;YACAD,WADA;YAEAC;UAFA;QAIA;MACA,CAnBA;MAoBA;IACA,CApFA;;IAqFAC;MACA;QACA;QACA;MACA;;MACA;QACA;QACA;MACA;;MACA;QACA;QACA;MACA;;MACA;QACA;QACA;MACA;;MACA;QACA;QACA;MACA;;MACA;QAAApC;MAAA;QACA;UACA;YACA;UACA,CAFA,MAEA;YACA;UACA;;UACAgC;UACA;YAAAC;UAAA;UACA;YACAC,WADA;YAEAC;UAFA;QAIA,CAZA,MAYA;UACA;YACAD,WADA;YAEAC;UAFA;QAIA;;QACA;MACA,CApBA;MAqBA;IACA,CAhIA;;IAiIAE;MACA,IACA,iBACA,sCADA,IAEA,wCAFA,IAGA,uBAJA,EAKA;QACA;UAAArC;QAAA;UACA;YACA;cACAkC,WADA;cAEAC;YAFA;UAIA,CALA,MAKA;YACA;cACAD,WADA;cAEAC;YAFA;UAIA;QACA,CAZA;MAaA;;MACA;QACAH;MACA;IACA,CAzJA;;IA0JAM;MACA,WACAC,GADA,CACA,8BADA,EACA;QACAC;UACAC;QADA;MADA,CADA,EAMAC,IANA,CAMA;QAAA1C;MAAA;QACA2C;MACA,CARA;IASA,CApKA;;IAqKAC;MACA;QACAxC;MADA;IAGA,CAzKA;;IA0KAyC;MACA;QACA;UACAzC;QADA;QAGA;MACA;IACA,CAjLA;;IAkLA0C;MACA;IACA,CApLA;;IAqLAC;MACA;IACA,CAvLA;;IAwLAC;MACA,WACAT,GADA,CACA,wBADA,EACA;QACAC;UACAC;QADA;MADA,CADA,EAMAC,IANA,CAMA;QAAA1C;MAAA;QACA2C;MACA,CARA;IASA,CAlMA;;IAmMAM;MACA;QACA5C;MADA;IAGA,CAvMA;;IAwMA6C;MACA;QACA;UACA7C;QADA;QAGA;MACA;IACA,CA/MA;;IAgNA8C;MACA;QACA;MACA;IACA,CApNA;;IAqNAC;MACA;MACA;IACA;;EAxNA,CAvDA;EAiRAC;IACAC;MACA;QACA;QACA;MACA,CAHA;IAIA;;EANA;AAjRA","names":["created","data","destroyed","addOrEdit","autoSave","categoryName","tagName","categorys","tagList","typeList","type","desc","article","id","articleTitle","articleContent","articleCover","tagNames","isTop","status","headers","Authorization","methods","listCategories","listTags","openModel","uploadCover","beforeUpload","resolve","imageConversion","uploadImg","formdata","saveArticleDraft","sessionStorage","path","title","message","saveOrUpdateArticle","autoSaveArticle","searchCategories","get","params","keywords","then","cb","handleSelectCategories","saveCategory","addCategory","removeCategory","searchTags","handleSelectTag","saveTag","addTag","removeTag","computed","tagClass"],"sourceRoot":"src/views/article","sources":["Article.vue"],"sourcesContent":["<template>\r\n  <el-card class=\"main-card\">\r\n    <div class=\"title\">{{ this.$route.name }}</div>\r\n    <div class=\"article-title-container\">\r\n      <el-input v-model=\"article.articleTitle\" size=\"medium\" placeholder=\"输入文章标题\" />\r\n      <el-button\r\n        type=\"danger\"\r\n        size=\"medium\"\r\n        class=\"save-btn\"\r\n        @click=\"saveArticleDraft\"\r\n        v-if=\"article.id == null || article.status == 3\">\r\n        保存草稿\r\n      </el-button>\r\n      <el-button type=\"danger\" size=\"medium\" @click=\"openModel\" style=\"margin-left: 10px\"> 发布文章 </el-button>\r\n    </div>\r\n    <mavon-editor ref=\"md\" v-model=\"article.articleContent\" @imgAdd=\"uploadImg\" style=\"height: calc(100vh - 260px)\" />\r\n    <el-dialog :visible.sync=\"addOrEdit\" width=\"40%\" top=\"3vh\">\r\n      <div class=\"dialog-title-container\" slot=\"title\">发布文章</div>\r\n      <el-form label-width=\"80px\" size=\"medium\" :model=\"article\">\r\n        <el-form-item label=\"文章分类\">\r\n          <el-tag\r\n            type=\"success\"\r\n            v-show=\"article.categoryName\"\r\n            style=\"margin: 0 1rem 0 0\"\r\n            :closable=\"true\"\r\n            @close=\"removeCategory\">\r\n            {{ article.categoryName }}\r\n          </el-tag>\r\n          <el-popover placement=\"bottom-start\" width=\"460\" trigger=\"click\" v-if=\"!article.categoryName\">\r\n            <div class=\"popover-title\">分类</div>\r\n            <el-autocomplete\r\n              style=\"width: 100%\"\r\n              v-model=\"categoryName\"\r\n              :fetch-suggestions=\"searchCategories\"\r\n              placeholder=\"请输入分类名搜索，enter可添加自定义分类\"\r\n              :trigger-on-focus=\"false\"\r\n              @keyup.enter.native=\"saveCategory\"\r\n              @select=\"handleSelectCategories\">\r\n              <template slot-scope=\"{ item }\">\r\n                <div>{{ item.categoryName }}</div>\r\n              </template>\r\n            </el-autocomplete>\r\n            <div class=\"popover-container\">\r\n              <div v-for=\"item of categorys\" :key=\"item.id\" class=\"category-item\" @click=\"addCategory(item)\">\r\n                {{ item.categoryName }}\r\n              </div>\r\n            </div>\r\n            <el-button type=\"success\" plain slot=\"reference\" size=\"small\"> 添加分类 </el-button>\r\n          </el-popover>\r\n        </el-form-item>\r\n        <el-form-item label=\"文章标签\">\r\n          <el-tag\r\n            v-for=\"(item, index) of article.tagNames\"\r\n            :key=\"index\"\r\n            style=\"margin: 0 1rem 0 0\"\r\n            :closable=\"true\"\r\n            @close=\"removeTag(item)\">\r\n            {{ item }}\r\n          </el-tag>\r\n          <el-popover placement=\"bottom-start\" width=\"460\" trigger=\"click\" v-if=\"article.tagNames.length < 3\">\r\n            <div class=\"popover-title\">标签</div>\r\n            <el-autocomplete\r\n              style=\"width: 100%\"\r\n              v-model=\"tagName\"\r\n              :fetch-suggestions=\"searchTags\"\r\n              placeholder=\"请输入标签名搜索，enter可添加自定义标签\"\r\n              :trigger-on-focus=\"false\"\r\n              @keyup.enter.native=\"saveTag\"\r\n              @select=\"handleSelectTag\">\r\n              <template slot-scope=\"{ item }\">\r\n                <div>{{ item.tagName }}</div>\r\n              </template>\r\n            </el-autocomplete>\r\n            <div class=\"popover-container\">\r\n              <div style=\"margin-bottom: 1rem\">添加标签</div>\r\n              <el-tag v-for=\"(item, index) of tagList\" :key=\"index\" :class=\"tagClass(item)\" @click=\"addTag(item)\">\r\n                {{ item.tagName }}\r\n              </el-tag>\r\n            </div>\r\n            <el-button type=\"primary\" plain slot=\"reference\" size=\"small\"> 添加标签 </el-button>\r\n          </el-popover>\r\n        </el-form-item>\r\n        <el-form-item label=\"文章类型\">\r\n          <el-select v-model=\"article.type\" placeholder=\"请选择类型\">\r\n            <el-option v-for=\"item in typeList\" :key=\"item.type\" :label=\"item.desc\" :value=\"item.type\" />\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"原文地址\" v-if=\"article.type != 1\">\r\n          <el-input v-model=\"article.originalUrl\" placeholder=\"请填写原文链接\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"上传封面\">\r\n          <el-upload\r\n            class=\"upload-cover\"\r\n            drag\r\n            action=\"/api/admin/articles/images\"\r\n            multiple\r\n            :headers=\"headers\"\r\n            :before-upload=\"beforeUpload\"\r\n            :on-success=\"uploadCover\">\r\n            <i class=\"el-icon-upload\" v-if=\"article.articleCover == ''\" />\r\n            <div class=\"el-upload__text\" v-if=\"article.articleCover == ''\">将文件拖到此处，或<em>点击上传</em></div>\r\n            <img v-else :src=\"article.articleCover\" width=\"360px\" height=\"180px\" />\r\n          </el-upload>\r\n        </el-form-item>\r\n        <el-form-item label=\"置顶\">\r\n          <el-switch\r\n            v-model=\"article.isTop\"\r\n            active-color=\"#13ce66\"\r\n            inactive-color=\"#F4F4F5\"\r\n            :active-value=\"1\"\r\n            :inactive-value=\"0\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"推荐\">\r\n          <el-switch\r\n            v-model=\"article.isFeatured\"\r\n            active-color=\"#13ce66\"\r\n            inactive-color=\"#F4F4F5\"\r\n            :active-value=\"1\"\r\n            :inactive-value=\"0\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"发布形式\">\r\n          <el-radio-group v-model=\"article.status\">\r\n            <el-radio :label=\"1\">公开</el-radio>\r\n            <el-radio :label=\"2\">密码</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        <el-form-item label=\"访问密码\" v-if=\"article.status == 2\">\r\n          <el-input v-model=\"article.password\" placeholder=\"请填写文章访问密码\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\">\r\n        <el-button @click=\"addOrEdit = false\">取 消</el-button>\r\n        <el-button type=\"danger\" @click=\"saveOrUpdateArticle\"> 发 表 </el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </el-card>\r\n</template>\r\n\r\n<script>\r\nimport * as imageConversion from 'image-conversion'\r\nexport default {\r\n  created() {\r\n    const path = this.$route.path\r\n    const arr = path.split('/')\r\n    const articleId = arr[2]\r\n    if (articleId) {\r\n      this.axios.get('/api/admin/articles/' + articleId).then(({ data }) => {\r\n        this.article = data.data\r\n      })\r\n    } else {\r\n      const article = sessionStorage.getItem('article')\r\n      if (article) {\r\n        this.article = JSON.parse(article)\r\n      }\r\n    }\r\n  },\r\n  destroyed() {\r\n    this.autoSaveArticle()\r\n  },\r\n  data: function () {\r\n    return {\r\n      addOrEdit: false,\r\n      autoSave: true,\r\n      categoryName: '',\r\n      tagName: '',\r\n      categorys: [],\r\n      tagList: [],\r\n      typeList: [\r\n        {\r\n          type: 1,\r\n          desc: '原创'\r\n        },\r\n        {\r\n          type: 2,\r\n          desc: '转载'\r\n        },\r\n        {\r\n          type: 3,\r\n          desc: '翻译'\r\n        }\r\n      ],\r\n      article: {\r\n        id: null,\r\n        articleTitle: this.$moment(new Date()).format('YYYY-MM-DD'),\r\n        articleContent: '',\r\n        articleCover: '',\r\n        categoryName: null,\r\n        tagNames: [],\r\n        isTop: 0,\r\n        type: 1,\r\n        status: 1\r\n      },\r\n      headers: { Authorization: 'Bearer ' + sessionStorage.getItem('token') }\r\n    }\r\n  },\r\n  methods: {\r\n    listCategories() {\r\n      this.axios.get('/api/admin/categories/search').then(({ data }) => {\r\n        this.categorys = data.data\r\n      })\r\n    },\r\n    listTags() {\r\n      this.axios.get('/api/admin/tags/search').then(({ data }) => {\r\n        this.tagList = data.data\r\n      })\r\n    },\r\n    openModel() {\r\n      if (this.article.articleTitle.trim() == '') {\r\n        this.$message.error('文章标题不能为空')\r\n        return false\r\n      }\r\n      if (this.article.articleContent.trim() == '') {\r\n        this.$message.error('文章内容不能为空')\r\n        return false\r\n      }\r\n      this.listCategories()\r\n      this.listTags()\r\n      this.addOrEdit = true\r\n    },\r\n    uploadCover(response) {\r\n      this.article.articleCover = response.data\r\n    },\r\n    beforeUpload(file) {\r\n      return new Promise((resolve) => {\r\n        if (file.size / 1024 < this.config.UPLOAD_SIZE) {\r\n          resolve(file)\r\n        }\r\n        imageConversion.compressAccurately(file, this.config.UPLOAD_SIZE).then((res) => {\r\n          resolve(res)\r\n        })\r\n      })\r\n    },\r\n    uploadImg(pos, file) {\r\n      var formdata = new FormData()\r\n      if (file.size / 1024 < this.config.UPLOAD_SIZE) {\r\n        formdata.append('file', file)\r\n        this.axios.post('/api/admin/articles/images', formdata).then(({ data }) => {\r\n          this.$refs.md.$img2Url(pos, data.data)\r\n        })\r\n      } else {\r\n        imageConversion.compressAccurately(file, this.config.UPLOAD_SIZE).then((res) => {\r\n          formdata.append('file', new window.File([res], file.name, { type: file.type }))\r\n          this.axios.post('/api/admin/articles/images', formdata).then(({ data }) => {\r\n            this.$refs.md.$img2Url(pos, data.data)\r\n          })\r\n        })\r\n      }\r\n    },\r\n    saveArticleDraft() {\r\n      if (this.article.articleTitle.trim() == '') {\r\n        this.$message.error('文章标题不能为空')\r\n        return false\r\n      }\r\n      if (this.article.articleContent.trim() == '') {\r\n        this.$message.error('文章内容不能为空')\r\n        return false\r\n      }\r\n      this.article.status = 3\r\n      this.axios.post('/api/admin/articles', this.article).then(({ data }) => {\r\n        if (data.flag) {\r\n          if (this.article.id === null) {\r\n            this.$store.commit('removeTab', '发布文章')\r\n          } else {\r\n            this.$store.commit('removeTab', '修改文章')\r\n          }\r\n          sessionStorage.removeItem('article')\r\n          this.$router.push({ path: '/article-list' })\r\n          this.$notify.success({\r\n            title: '成功',\r\n            message: '保存草稿成功'\r\n          })\r\n        } else {\r\n          this.$notify.error({\r\n            title: '失败',\r\n            message: '保存草稿失败'\r\n          })\r\n        }\r\n      })\r\n      this.autoSave = false\r\n    },\r\n    saveOrUpdateArticle() {\r\n      if (this.article.articleTitle.trim() == '') {\r\n        this.$message.error('文章标题不能为空')\r\n        return false\r\n      }\r\n      if (this.article.articleContent.trim() == '') {\r\n        this.$message.error('文章内容不能为空')\r\n        return false\r\n      }\r\n      if (this.article.categoryName == null) {\r\n        this.$message.error('文章分类不能为空')\r\n        return false\r\n      }\r\n      if (this.article.tagNames.length == 0) {\r\n        this.$message.error('文章标签不能为空')\r\n        return false\r\n      }\r\n      if (this.article.articleCover.trim() == '') {\r\n        this.$message.error('文章封面不能为空')\r\n        return false\r\n      }\r\n      this.axios.post('/api/admin/articles', this.article).then(({ data }) => {\r\n        if (data.flag) {\r\n          if (this.article.id === null) {\r\n            this.$store.commit('removeTab', '发布文章')\r\n          } else {\r\n            this.$store.commit('removeTab', '修改文章')\r\n          }\r\n          sessionStorage.removeItem('article')\r\n          this.$router.push({ path: '/article-list' })\r\n          this.$notify.success({\r\n            title: '成功',\r\n            message: data.message\r\n          })\r\n        } else {\r\n          this.$notify.error({\r\n            title: '失败',\r\n            message: data.message\r\n          })\r\n        }\r\n        this.addOrEdit = false\r\n      })\r\n      this.autoSave = false\r\n    },\r\n    autoSaveArticle() {\r\n      if (\r\n        this.autoSave &&\r\n        this.article.articleTitle.trim() != '' &&\r\n        this.article.articleContent.trim() != '' &&\r\n        this.article.id != null\r\n      ) {\r\n        this.axios.post('/api/admin/articles', this.article).then(({ data }) => {\r\n          if (data.flag) {\r\n            this.$notify.success({\r\n              title: '成功',\r\n              message: '自动保存成功'\r\n            })\r\n          } else {\r\n            this.$notify.error({\r\n              title: '失败',\r\n              message: '自动保存失败'\r\n            })\r\n          }\r\n        })\r\n      }\r\n      if (this.autoSave && this.article.id == null) {\r\n        sessionStorage.setItem('article', JSON.stringify(this.article))\r\n      }\r\n    },\r\n    searchCategories(keywords, cb) {\r\n      this.axios\r\n        .get('/api/admin/categories/search', {\r\n          params: {\r\n            keywords: keywords\r\n          }\r\n        })\r\n        .then(({ data }) => {\r\n          cb(data.data)\r\n        })\r\n    },\r\n    handleSelectCategories(item) {\r\n      this.addCategory({\r\n        categoryName: item.categoryName\r\n      })\r\n    },\r\n    saveCategory() {\r\n      if (this.categoryName.trim() != '') {\r\n        this.addCategory({\r\n          categoryName: this.categoryName\r\n        })\r\n        this.categoryName = ''\r\n      }\r\n    },\r\n    addCategory(item) {\r\n      this.article.categoryName = item.categoryName\r\n    },\r\n    removeCategory() {\r\n      this.article.categoryName = null\r\n    },\r\n    searchTags(keywords, cb) {\r\n      this.axios\r\n        .get('/api/admin/tags/search', {\r\n          params: {\r\n            keywords: keywords\r\n          }\r\n        })\r\n        .then(({ data }) => {\r\n          cb(data.data)\r\n        })\r\n    },\r\n    handleSelectTag(item) {\r\n      this.addTag({\r\n        tagName: item.tagName\r\n      })\r\n    },\r\n    saveTag() {\r\n      if (this.tagName.trim() != '') {\r\n        this.addTag({\r\n          tagName: this.tagName\r\n        })\r\n        this.tagName = ''\r\n      }\r\n    },\r\n    addTag(item) {\r\n      if (this.article.tagNames.indexOf(item.tagName) == -1) {\r\n        this.article.tagNames.push(item.tagName)\r\n      }\r\n    },\r\n    removeTag(item) {\r\n      const index = this.article.tagNames.indexOf(item)\r\n      this.article.tagNames.splice(index, 1)\r\n    }\r\n  },\r\n  computed: {\r\n    tagClass() {\r\n      return function (item) {\r\n        const index = this.article.tagNames.indexOf(item.tagName)\r\n        return index != -1 ? 'tag-item-select' : 'tag-item'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.article-title-container {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 1.25rem;\r\n  margin-top: 2.25rem;\r\n}\r\n.save-btn {\r\n  margin-left: 0.75rem;\r\n  background: #fff;\r\n  color: #f56c6c;\r\n}\r\n.tag-item {\r\n  margin-right: 1rem;\r\n  margin-bottom: 1rem;\r\n  cursor: pointer;\r\n}\r\n.tag-item-select {\r\n  margin-right: 1rem;\r\n  margin-bottom: 1rem;\r\n  cursor: not-allowed;\r\n  color: #ccccd8 !important;\r\n}\r\n.category-item {\r\n  cursor: pointer;\r\n  padding: 0.6rem 0.5rem;\r\n}\r\n.category-item:hover {\r\n  background-color: #f0f9eb;\r\n  color: #67c23a;\r\n}\r\n.popover-title {\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n}\r\n.popover-container {\r\n  margin-top: 1rem;\r\n  height: 260px;\r\n  overflow-y: auto;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}