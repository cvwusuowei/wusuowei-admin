{"ast":null,"code":"export default {\n  data() {\n    return {\n      dayRule: '',\n      dayRuleSup: '',\n      dateArr: [],\n      resultList: [],\n      isShow: false\n    };\n  },\n\n  name: 'crontab-result',\n  methods: {\n    expressionChange() {\n      this.isShow = false;\n      let ruleArr = this.$options.propsData.ex.split(' ');\n      let nums = 0;\n      let resultArr = [];\n      let nTime = new Date();\n      let nYear = nTime.getFullYear();\n      let nMonth = nTime.getMonth() + 1;\n      let nDay = nTime.getDate();\n      let nHour = nTime.getHours();\n      let nMin = nTime.getMinutes();\n      let nSecond = nTime.getSeconds();\n      this.getSecondArr(ruleArr[0]);\n      this.getMinArr(ruleArr[1]);\n      this.getHourArr(ruleArr[2]);\n      this.getDayArr(ruleArr[3]);\n      this.getMonthArr(ruleArr[4]);\n      this.getWeekArr(ruleArr[5]);\n      this.getYearArr(ruleArr[6], nYear);\n      let sDate = this.dateArr[0];\n      let mDate = this.dateArr[1];\n      let hDate = this.dateArr[2];\n      let DDate = this.dateArr[3];\n      let MDate = this.dateArr[4];\n      let YDate = this.dateArr[5];\n      let sIdx = this.getIndex(sDate, nSecond);\n      let mIdx = this.getIndex(mDate, nMin);\n      let hIdx = this.getIndex(hDate, nHour);\n      let DIdx = this.getIndex(DDate, nDay);\n      let MIdx = this.getIndex(MDate, nMonth);\n      let YIdx = this.getIndex(YDate, nYear);\n\n      const resetSecond = function () {\n        sIdx = 0;\n        nSecond = sDate[sIdx];\n      };\n\n      const resetMin = function () {\n        mIdx = 0;\n        nMin = mDate[mIdx];\n        resetSecond();\n      };\n\n      const resetHour = function () {\n        hIdx = 0;\n        nHour = hDate[hIdx];\n        resetMin();\n      };\n\n      const resetDay = function () {\n        DIdx = 0;\n        nDay = DDate[DIdx];\n        resetHour();\n      };\n\n      const resetMonth = function () {\n        MIdx = 0;\n        nMonth = MDate[MIdx];\n        resetDay();\n      };\n\n      if (nYear !== YDate[YIdx]) {\n        resetMonth();\n      }\n\n      if (nMonth !== MDate[MIdx]) {\n        resetDay();\n      }\n\n      if (nDay !== DDate[DIdx]) {\n        resetHour();\n      }\n\n      if (nHour !== hDate[hIdx]) {\n        resetMin();\n      }\n\n      if (nMin !== mDate[mIdx]) {\n        resetSecond();\n      }\n\n      goYear: for (let Yi = YIdx; Yi < YDate.length; Yi++) {\n        let YY = YDate[Yi];\n\n        if (nMonth > MDate[MDate.length - 1]) {\n          resetMonth();\n          continue;\n        }\n\n        goMonth: for (let Mi = MIdx; Mi < MDate.length; Mi++) {\n          let MM = MDate[Mi];\n          MM = MM < 10 ? '0' + MM : MM;\n\n          if (nDay > DDate[DDate.length - 1]) {\n            resetDay();\n\n            if (Mi == MDate.length - 1) {\n              resetMonth();\n              continue goYear;\n            }\n\n            continue;\n          }\n\n          goDay: for (let Di = DIdx; Di < DDate.length; Di++) {\n            let DD = DDate[Di];\n            let thisDD = DD < 10 ? '0' + DD : DD;\n\n            if (nHour > hDate[hDate.length - 1]) {\n              resetHour();\n\n              if (Di == DDate.length - 1) {\n                resetDay();\n\n                if (Mi == MDate.length - 1) {\n                  resetMonth();\n                  continue goYear;\n                }\n\n                continue goMonth;\n              }\n\n              continue;\n            }\n\n            if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true && this.dayRule !== 'workDay' && this.dayRule !== 'lastWeek' && this.dayRule !== 'lastDay') {\n              resetDay();\n              continue goMonth;\n            }\n\n            if (this.dayRule == 'lastDay') {\n              if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n                while (DD > 0 && this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n                  DD--;\n                  thisDD = DD < 10 ? '0' + DD : DD;\n                }\n              }\n            } else if (this.dayRule == 'workDay') {\n              if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n                while (DD > 0 && this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n                  DD--;\n                  thisDD = DD < 10 ? '0' + DD : DD;\n                }\n              }\n\n              let thisWeek = this.formatDate(new Date(YY + '-' + MM + '-' + thisDD + ' 00:00:00'), 'week');\n\n              if (thisWeek == 1) {\n                DD++;\n                thisDD = DD < 10 ? '0' + DD : DD;\n\n                if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n                  DD -= 3;\n                }\n              } else if (thisWeek == 7) {\n                if (this.dayRuleSup !== 1) {\n                  DD--;\n                } else {\n                  DD += 2;\n                }\n              }\n            } else if (this.dayRule == 'weekDay') {\n              let thisWeek = this.formatDate(new Date(YY + '-' + MM + '-' + DD + ' 00:00:00'), 'week');\n\n              if (this.dayRuleSup.indexOf(thisWeek) < 0) {\n                if (Di == DDate.length - 1) {\n                  resetDay();\n\n                  if (Mi == MDate.length - 1) {\n                    resetMonth();\n                    continue goYear;\n                  }\n\n                  continue goMonth;\n                }\n\n                continue;\n              }\n            } else if (this.dayRule == 'assWeek') {\n              let thisWeek = this.formatDate(new Date(YY + '-' + MM + '-' + DD + ' 00:00:00'), 'week');\n\n              if (this.dayRuleSup[1] >= thisWeek) {\n                DD = (this.dayRuleSup[0] - 1) * 7 + this.dayRuleSup[1] - thisWeek + 1;\n              } else {\n                DD = this.dayRuleSup[0] * 7 + this.dayRuleSup[1] - thisWeek + 1;\n              }\n            } else if (this.dayRule == 'lastWeek') {\n              if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n                while (DD > 0 && this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n                  DD--;\n                  thisDD = DD < 10 ? '0' + DD : DD;\n                }\n              }\n\n              let thisWeek = this.formatDate(new Date(YY + '-' + MM + '-' + thisDD + ' 00:00:00'), 'week');\n\n              if (this.dayRuleSup < thisWeek) {\n                DD -= thisWeek - this.dayRuleSup;\n              } else if (this.dayRuleSup > thisWeek) {\n                DD -= 7 - (this.dayRuleSup - thisWeek);\n              }\n            }\n\n            DD = DD < 10 ? '0' + DD : DD;\n\n            goHour: for (let hi = hIdx; hi < hDate.length; hi++) {\n              let hh = hDate[hi] < 10 ? '0' + hDate[hi] : hDate[hi];\n\n              if (nMin > mDate[mDate.length - 1]) {\n                resetMin();\n\n                if (hi == hDate.length - 1) {\n                  resetHour();\n\n                  if (Di == DDate.length - 1) {\n                    resetDay();\n\n                    if (Mi == MDate.length - 1) {\n                      resetMonth();\n                      continue goYear;\n                    }\n\n                    continue goMonth;\n                  }\n\n                  continue goDay;\n                }\n\n                continue;\n              }\n\n              goMin: for (let mi = mIdx; mi < mDate.length; mi++) {\n                let mm = mDate[mi] < 10 ? '0' + mDate[mi] : mDate[mi];\n\n                if (nSecond > sDate[sDate.length - 1]) {\n                  resetSecond();\n\n                  if (mi == mDate.length - 1) {\n                    resetMin();\n\n                    if (hi == hDate.length - 1) {\n                      resetHour();\n\n                      if (Di == DDate.length - 1) {\n                        resetDay();\n\n                        if (Mi == MDate.length - 1) {\n                          resetMonth();\n                          continue goYear;\n                        }\n\n                        continue goMonth;\n                      }\n\n                      continue goDay;\n                    }\n\n                    continue goHour;\n                  }\n\n                  continue;\n                }\n\n                goSecond: for (let si = sIdx; si <= sDate.length - 1; si++) {\n                  let ss = sDate[si] < 10 ? '0' + sDate[si] : sDate[si];\n\n                  if (MM !== '00' && DD !== '00') {\n                    resultArr.push(YY + '-' + MM + '-' + DD + ' ' + hh + ':' + mm + ':' + ss);\n                    nums++;\n                  }\n\n                  if (nums == 5) break goYear;\n\n                  if (si == sDate.length - 1) {\n                    resetSecond();\n\n                    if (mi == mDate.length - 1) {\n                      resetMin();\n\n                      if (hi == hDate.length - 1) {\n                        resetHour();\n\n                        if (Di == DDate.length - 1) {\n                          resetDay();\n\n                          if (Mi == MDate.length - 1) {\n                            resetMonth();\n                            continue goYear;\n                          }\n\n                          continue goMonth;\n                        }\n\n                        continue goDay;\n                      }\n\n                      continue goHour;\n                    }\n\n                    continue goMin;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (resultArr.length == 0) {\n        this.resultList = ['没有达到条件的结果！'];\n      } else {\n        this.resultList = resultArr;\n\n        if (resultArr.length !== 5) {\n          this.resultList.push('最近100年内只有上面' + resultArr.length + '条结果！');\n        }\n      }\n\n      this.isShow = true;\n    },\n\n    getIndex(arr, value) {\n      if (value <= arr[0] || value > arr[arr.length - 1]) {\n        return 0;\n      } else {\n        for (let i = 0; i < arr.length - 1; i++) {\n          if (value > arr[i] && value <= arr[i + 1]) {\n            return i + 1;\n          }\n        }\n      }\n    },\n\n    getYearArr(rule, year) {\n      this.dateArr[5] = this.getOrderArr(year, year + 100);\n\n      if (rule !== undefined) {\n        if (rule.indexOf('-') >= 0) {\n          this.dateArr[5] = this.getCycleArr(rule, year + 100, false);\n        } else if (rule.indexOf('/') >= 0) {\n          this.dateArr[5] = this.getAverageArr(rule, year + 100);\n        } else if (rule !== '*') {\n          this.dateArr[5] = this.getAssignArr(rule);\n        }\n      }\n    },\n\n    getMonthArr(rule) {\n      this.dateArr[4] = this.getOrderArr(1, 12);\n\n      if (rule.indexOf('-') >= 0) {\n        this.dateArr[4] = this.getCycleArr(rule, 12, false);\n      } else if (rule.indexOf('/') >= 0) {\n        this.dateArr[4] = this.getAverageArr(rule, 12);\n      } else if (rule !== '*') {\n        this.dateArr[4] = this.getAssignArr(rule);\n      }\n    },\n\n    getWeekArr(rule) {\n      if (this.dayRule == '' && this.dayRuleSup == '') {\n        if (rule.indexOf('-') >= 0) {\n          this.dayRule = 'weekDay';\n          this.dayRuleSup = this.getCycleArr(rule, 7, false);\n        } else if (rule.indexOf('#') >= 0) {\n          this.dayRule = 'assWeek';\n          let matchRule = rule.match(/[0-9]{1}/g);\n          this.dayRuleSup = [Number(matchRule[1]), Number(matchRule[0])];\n          this.dateArr[3] = [1];\n\n          if (this.dayRuleSup[1] == 7) {\n            this.dayRuleSup[1] = 0;\n          }\n        } else if (rule.indexOf('L') >= 0) {\n          this.dayRule = 'lastWeek';\n          this.dayRuleSup = Number(rule.match(/[0-9]{1,2}/g)[0]);\n          this.dateArr[3] = [31];\n\n          if (this.dayRuleSup == 7) {\n            this.dayRuleSup = 0;\n          }\n        } else if (rule !== '*' && rule !== '?') {\n          this.dayRule = 'weekDay';\n          this.dayRuleSup = this.getAssignArr(rule);\n        }\n      }\n    },\n\n    getDayArr(rule) {\n      this.dateArr[3] = this.getOrderArr(1, 31);\n      this.dayRule = '';\n      this.dayRuleSup = '';\n\n      if (rule.indexOf('-') >= 0) {\n        this.dateArr[3] = this.getCycleArr(rule, 31, false);\n        this.dayRuleSup = 'null';\n      } else if (rule.indexOf('/') >= 0) {\n        this.dateArr[3] = this.getAverageArr(rule, 31);\n        this.dayRuleSup = 'null';\n      } else if (rule.indexOf('W') >= 0) {\n        this.dayRule = 'workDay';\n        this.dayRuleSup = Number(rule.match(/[0-9]{1,2}/g)[0]);\n        this.dateArr[3] = [this.dayRuleSup];\n      } else if (rule.indexOf('L') >= 0) {\n        this.dayRule = 'lastDay';\n        this.dayRuleSup = 'null';\n        this.dateArr[3] = [31];\n      } else if (rule !== '*' && rule !== '?') {\n        this.dateArr[3] = this.getAssignArr(rule);\n        this.dayRuleSup = 'null';\n      } else if (rule == '*') {\n        this.dayRuleSup = 'null';\n      }\n    },\n\n    getHourArr(rule) {\n      this.dateArr[2] = this.getOrderArr(0, 23);\n\n      if (rule.indexOf('-') >= 0) {\n        this.dateArr[2] = this.getCycleArr(rule, 24, true);\n      } else if (rule.indexOf('/') >= 0) {\n        this.dateArr[2] = this.getAverageArr(rule, 23);\n      } else if (rule !== '*') {\n        this.dateArr[2] = this.getAssignArr(rule);\n      }\n    },\n\n    getMinArr(rule) {\n      this.dateArr[1] = this.getOrderArr(0, 59);\n\n      if (rule.indexOf('-') >= 0) {\n        this.dateArr[1] = this.getCycleArr(rule, 60, true);\n      } else if (rule.indexOf('/') >= 0) {\n        this.dateArr[1] = this.getAverageArr(rule, 59);\n      } else if (rule !== '*') {\n        this.dateArr[1] = this.getAssignArr(rule);\n      }\n    },\n\n    getSecondArr(rule) {\n      this.dateArr[0] = this.getOrderArr(0, 59);\n\n      if (rule.indexOf('-') >= 0) {\n        this.dateArr[0] = this.getCycleArr(rule, 60, true);\n      } else if (rule.indexOf('/') >= 0) {\n        this.dateArr[0] = this.getAverageArr(rule, 59);\n      } else if (rule !== '*') {\n        this.dateArr[0] = this.getAssignArr(rule);\n      }\n    },\n\n    getOrderArr(min, max) {\n      let arr = [];\n\n      for (let i = min; i <= max; i++) {\n        arr.push(i);\n      }\n\n      return arr;\n    },\n\n    getAssignArr(rule) {\n      let arr = [];\n      let assiginArr = rule.split(',');\n\n      for (let i = 0; i < assiginArr.length; i++) {\n        arr[i] = Number(assiginArr[i]);\n      }\n\n      arr.sort(this.compare);\n      return arr;\n    },\n\n    getAverageArr(rule, limit) {\n      let arr = [];\n      let agArr = rule.split('/');\n      let min = Number(agArr[0]);\n      let step = Number(agArr[1]);\n\n      while (min <= limit) {\n        arr.push(min);\n        min += step;\n      }\n\n      return arr;\n    },\n\n    getCycleArr(rule, limit, status) {\n      let arr = [];\n      let cycleArr = rule.split('-');\n      let min = Number(cycleArr[0]);\n      let max = Number(cycleArr[1]);\n\n      if (min > max) {\n        max += limit;\n      }\n\n      for (let i = min; i <= max; i++) {\n        let add = 0;\n\n        if (status == false && i % limit == 0) {\n          add = limit;\n        }\n\n        arr.push(Math.round(i % limit + add));\n      }\n\n      arr.sort(this.compare);\n      return arr;\n    },\n\n    compare(value1, value2) {\n      if (value2 - value1 > 0) {\n        return -1;\n      } else {\n        return 1;\n      }\n    },\n\n    formatDate(value, type) {\n      let time = typeof value == 'number' ? new Date(value) : value;\n      let Y = time.getFullYear();\n      let M = time.getMonth() + 1;\n      let D = time.getDate();\n      let h = time.getHours();\n      let m = time.getMinutes();\n      let s = time.getSeconds();\n      let week = time.getDay();\n\n      if (type == undefined) {\n        return Y + '-' + (M < 10 ? '0' + M : M) + '-' + (D < 10 ? '0' + D : D) + ' ' + (h < 10 ? '0' + h : h) + ':' + (m < 10 ? '0' + m : m) + ':' + (s < 10 ? '0' + s : s);\n      } else if (type == 'week') {\n        return week + 1;\n      }\n    },\n\n    checkDate(value) {\n      let time = new Date(value);\n      let format = this.formatDate(time);\n      return value === format;\n    }\n\n  },\n  watch: {\n    ex: 'expressionChange'\n  },\n  props: ['ex'],\n  mounted: function () {\n    this.expressionChange();\n  }\n};","map":{"version":3,"mappings":"AAaA;EACAA;IACA;MACAC,WADA;MAEAC,cAFA;MAGAC,WAHA;MAIAC,cAJA;MAKAC;IALA;EAOA,CATA;;EAUAC,sBAVA;EAWAC;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MACA;QACAC;QACAC;MACA,CAHA;;MAIA;QACAC;QACAC;QACAC;MACA,CAJA;;MAKA;QACAC;QACAC;QACAC;MACA,CAJA;;MAKA;QACAC;QACAC;QACAC;MACA,CAJA;;MAKA;QACAC;QACAC;QACAC;MACA,CAJA;;MAKA;QACAC;MACA;;MACA;QACAD;MACA;;MACA;QACAH;MACA;;MACA;QACAH;MACA;;MACA;QACAH;MACA;;MACAW;QACA;;QACA;UACAD;UACA;QACA;;QACAE;UACA;UACAC;;UACA;YACAJ;;YACA;cACAC;cACA;YACA;;YACA;UACA;;UACAI;YACA;YACA;;YACA;cACAR;;cACA;gBACAG;;gBACA;kBACAC;kBACA;gBACA;;gBACA;cACA;;cACA;YACA;;YACA,IACA,uEACA,0BADA,IAEA,2BAFA,IAGA,0BAJA,EAKA;cACAD;cACA;YACA;;YACA;cACA;gBACA;kBACAM;kBAEAC;gBACA;cACA;YACA,CARA,MAQA;cACA;gBACA;kBACAD;kBACAC;gBACA;cACA;;cACA;;cACA;gBACAD;gBACAC;;gBACA;kBACAD;gBACA;cACA,CANA,MAMA;gBACA;kBACAA;gBACA,CAFA,MAEA;kBACAA;gBACA;cACA;YACA,CArBA,MAqBA;cACA;;cACA;gBACA;kBACAN;;kBACA;oBACAC;oBACA;kBACA;;kBACA;gBACA;;gBACA;cACA;YACA,CAbA,MAaA;cACA;;cACA;gBACAK;cACA,CAFA,MAEA;gBACAA;cACA;YACA,CAPA,MAOA;cACA;gBACA;kBACAA;kBACAC;gBACA;cACA;;cACA;;cACA;gBACAD;cACA,CAFA,MAEA;gBACAA;cACA;YACA;;YACAA;;YACAE;cACA;;cACA;gBACAd;;gBACA;kBACAG;;kBACA;oBACAG;;oBACA;sBACAC;sBACA;oBACA;;oBACA;kBACA;;kBACA;gBACA;;gBACA;cACA;;cACAQ;gBACA;;gBACA;kBACAlB;;kBACA;oBACAG;;oBACA;sBACAG;;sBACA;wBACAG;;wBACA;0BACAC;0BACA;wBACA;;wBACA;sBACA;;sBACA;oBACA;;oBACA;kBACA;;kBACA;gBACA;;gBACAS;kBACA;;kBACA;oBACAC;oBACAC;kBACA;;kBACA;;kBACA;oBACArB;;oBACA;sBACAG;;sBACA;wBACAG;;wBACA;0BACAG;;0BACA;4BACAC;4BACA;0BACA;;0BACA;wBACA;;wBACA;sBACA;;sBACA;oBACA;;oBACA;kBACA;gBACA;cACA;YACA;UACA;QACA;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;;QACA;UACA;QACA;MACA;;MACA;IACA,CAlQA;;IAmQAY;MACA;QACA;MACA,CAFA,MAEA;QACA;UACA;YACA;UACA;QACA;MACA;IACA,CA7QA;;IA8QAC;MACA;;MACA;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA,CAFA,MAEA;UACA;QACA;MACA;IACA,CAzRA;;IA0RAC;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAnSA;;IAoSAC;MACA;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;UACA;UACA;UACA;;UACA;YACA;UACA;QACA,CARA,MAQA;UACA;UACA;UACA;;UACA;YACA;UACA;QACA,CAPA,MAOA;UACA;UACA;QACA;MACA;IACA,CA7TA;;IA8TAC;MACA;MACA;MACA;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;QACA;MACA,CAHA,MAGA;QACA;QACA;QACA;MACA,CAJA,MAIA;QACA;QACA;QACA;MACA,CAJA,MAIA;QACA;QACA;MACA,CAHA,MAGA;QACA;MACA;IACA,CAtVA;;IAuVAC;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAhWA;;IAiWAC;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CA1WA;;IA2WAC;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CApXA;;IAqXAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CA3XA;;IA4XAC;MACA;MACA;;MACA;QACAD;MACA;;MACAA;MACA;IACA,CApYA;;IAqYAE;MACA;MACA;MACA;MACA;;MACA;QACAF;QACAG;MACA;;MACA;IACA,CA/YA;;IAgZAC;MACA;MACA;MACA;MACA;;MACA;QACAC;MACA;;MACA;QACA;;QACA;UACAC;QACA;;QACAN;MACA;;MACAA;MACA;IACA,CAjaA;;IAkaAO;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAxaA;;IAyaAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MACA;QACA,OACAC,IACA,GADA,IAEAC,oBAFA,IAGA,GAHA,IAIAC,oBAJA,IAKA,GALA,IAMAC,oBANA,IAOA,GAPA,IAQAC,oBARA,IASA,GATA,IAUAC,oBAVA,CADA;MAaA,CAdA,MAcA;QACA;MACA;IACA,CAncA;;IAocAC;MACA;MACA;MACA;IACA;;EAxcA,CAXA;EAqdAC;IACAC;EADA,CArdA;EAwdAC,aAxdA;EAydAC;IACA;EACA;AA3dA","names":["data","dayRule","dayRuleSup","dateArr","resultList","isShow","name","methods","expressionChange","sIdx","nSecond","mIdx","nMin","resetSecond","hIdx","nHour","resetMin","DIdx","nDay","resetHour","MIdx","nMonth","resetDay","resetMonth","goYear","goMonth","MM","goDay","DD","thisDD","goHour","goMin","goSecond","resultArr","nums","getIndex","getYearArr","getMonthArr","getWeekArr","getDayArr","getHourArr","getMinArr","getSecondArr","getOrderArr","arr","getAssignArr","getAverageArr","min","getCycleArr","max","add","compare","formatDate","Y","M","D","h","m","s","checkDate","watch","ex","props","mounted"],"sourceRoot":"src/components/Crontab","sources":["result.vue"],"sourcesContent":["<template>\r\n  <div class=\"popup-result\">\r\n    <p>最近5次运行时间</p>\r\n    <ul class=\"popup-result-scroll\">\r\n      <template v-if=\"isShow\">\r\n        <li v-for=\"item in resultList\" :key=\"item\">{{ item }}</li>\r\n      </template>\r\n      <li v-else>计算结果中...</li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      dayRule: '',\r\n      dayRuleSup: '',\r\n      dateArr: [],\r\n      resultList: [],\r\n      isShow: false\r\n    }\r\n  },\r\n  name: 'crontab-result',\r\n  methods: {\r\n    expressionChange() {\r\n      this.isShow = false\r\n      let ruleArr = this.$options.propsData.ex.split(' ')\r\n      let nums = 0\r\n      let resultArr = []\r\n      let nTime = new Date()\r\n      let nYear = nTime.getFullYear()\r\n      let nMonth = nTime.getMonth() + 1\r\n      let nDay = nTime.getDate()\r\n      let nHour = nTime.getHours()\r\n      let nMin = nTime.getMinutes()\r\n      let nSecond = nTime.getSeconds()\r\n      this.getSecondArr(ruleArr[0])\r\n      this.getMinArr(ruleArr[1])\r\n      this.getHourArr(ruleArr[2])\r\n      this.getDayArr(ruleArr[3])\r\n      this.getMonthArr(ruleArr[4])\r\n      this.getWeekArr(ruleArr[5])\r\n      this.getYearArr(ruleArr[6], nYear)\r\n      let sDate = this.dateArr[0]\r\n      let mDate = this.dateArr[1]\r\n      let hDate = this.dateArr[2]\r\n      let DDate = this.dateArr[3]\r\n      let MDate = this.dateArr[4]\r\n      let YDate = this.dateArr[5]\r\n      let sIdx = this.getIndex(sDate, nSecond)\r\n      let mIdx = this.getIndex(mDate, nMin)\r\n      let hIdx = this.getIndex(hDate, nHour)\r\n      let DIdx = this.getIndex(DDate, nDay)\r\n      let MIdx = this.getIndex(MDate, nMonth)\r\n      let YIdx = this.getIndex(YDate, nYear)\r\n      const resetSecond = function () {\r\n        sIdx = 0\r\n        nSecond = sDate[sIdx]\r\n      }\r\n      const resetMin = function () {\r\n        mIdx = 0\r\n        nMin = mDate[mIdx]\r\n        resetSecond()\r\n      }\r\n      const resetHour = function () {\r\n        hIdx = 0\r\n        nHour = hDate[hIdx]\r\n        resetMin()\r\n      }\r\n      const resetDay = function () {\r\n        DIdx = 0\r\n        nDay = DDate[DIdx]\r\n        resetHour()\r\n      }\r\n      const resetMonth = function () {\r\n        MIdx = 0\r\n        nMonth = MDate[MIdx]\r\n        resetDay()\r\n      }\r\n      if (nYear !== YDate[YIdx]) {\r\n        resetMonth()\r\n      }\r\n      if (nMonth !== MDate[MIdx]) {\r\n        resetDay()\r\n      }\r\n      if (nDay !== DDate[DIdx]) {\r\n        resetHour()\r\n      }\r\n      if (nHour !== hDate[hIdx]) {\r\n        resetMin()\r\n      }\r\n      if (nMin !== mDate[mIdx]) {\r\n        resetSecond()\r\n      }\r\n      goYear: for (let Yi = YIdx; Yi < YDate.length; Yi++) {\r\n        let YY = YDate[Yi]\r\n        if (nMonth > MDate[MDate.length - 1]) {\r\n          resetMonth()\r\n          continue\r\n        }\r\n        goMonth: for (let Mi = MIdx; Mi < MDate.length; Mi++) {\r\n          let MM = MDate[Mi]\r\n          MM = MM < 10 ? '0' + MM : MM\r\n          if (nDay > DDate[DDate.length - 1]) {\r\n            resetDay()\r\n            if (Mi == MDate.length - 1) {\r\n              resetMonth()\r\n              continue goYear\r\n            }\r\n            continue\r\n          }\r\n          goDay: for (let Di = DIdx; Di < DDate.length; Di++) {\r\n            let DD = DDate[Di]\r\n            let thisDD = DD < 10 ? '0' + DD : DD\r\n            if (nHour > hDate[hDate.length - 1]) {\r\n              resetHour()\r\n              if (Di == DDate.length - 1) {\r\n                resetDay()\r\n                if (Mi == MDate.length - 1) {\r\n                  resetMonth()\r\n                  continue goYear\r\n                }\r\n                continue goMonth\r\n              }\r\n              continue\r\n            }\r\n            if (\r\n              this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true &&\r\n              this.dayRule !== 'workDay' &&\r\n              this.dayRule !== 'lastWeek' &&\r\n              this.dayRule !== 'lastDay'\r\n            ) {\r\n              resetDay()\r\n              continue goMonth\r\n            }\r\n            if (this.dayRule == 'lastDay') {\r\n              if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\r\n                while (DD > 0 && this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\r\n                  DD--\r\n\r\n                  thisDD = DD < 10 ? '0' + DD : DD\r\n                }\r\n              }\r\n            } else if (this.dayRule == 'workDay') {\r\n              if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\r\n                while (DD > 0 && this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\r\n                  DD--\r\n                  thisDD = DD < 10 ? '0' + DD : DD\r\n                }\r\n              }\r\n              let thisWeek = this.formatDate(new Date(YY + '-' + MM + '-' + thisDD + ' 00:00:00'), 'week')\r\n              if (thisWeek == 1) {\r\n                DD++\r\n                thisDD = DD < 10 ? '0' + DD : DD\r\n                if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\r\n                  DD -= 3\r\n                }\r\n              } else if (thisWeek == 7) {\r\n                if (this.dayRuleSup !== 1) {\r\n                  DD--\r\n                } else {\r\n                  DD += 2\r\n                }\r\n              }\r\n            } else if (this.dayRule == 'weekDay') {\r\n              let thisWeek = this.formatDate(new Date(YY + '-' + MM + '-' + DD + ' 00:00:00'), 'week')\r\n              if (this.dayRuleSup.indexOf(thisWeek) < 0) {\r\n                if (Di == DDate.length - 1) {\r\n                  resetDay()\r\n                  if (Mi == MDate.length - 1) {\r\n                    resetMonth()\r\n                    continue goYear\r\n                  }\r\n                  continue goMonth\r\n                }\r\n                continue\r\n              }\r\n            } else if (this.dayRule == 'assWeek') {\r\n              let thisWeek = this.formatDate(new Date(YY + '-' + MM + '-' + DD + ' 00:00:00'), 'week')\r\n              if (this.dayRuleSup[1] >= thisWeek) {\r\n                DD = (this.dayRuleSup[0] - 1) * 7 + this.dayRuleSup[1] - thisWeek + 1\r\n              } else {\r\n                DD = this.dayRuleSup[0] * 7 + this.dayRuleSup[1] - thisWeek + 1\r\n              }\r\n            } else if (this.dayRule == 'lastWeek') {\r\n              if (this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\r\n                while (DD > 0 && this.checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\r\n                  DD--\r\n                  thisDD = DD < 10 ? '0' + DD : DD\r\n                }\r\n              }\r\n              let thisWeek = this.formatDate(new Date(YY + '-' + MM + '-' + thisDD + ' 00:00:00'), 'week')\r\n              if (this.dayRuleSup < thisWeek) {\r\n                DD -= thisWeek - this.dayRuleSup\r\n              } else if (this.dayRuleSup > thisWeek) {\r\n                DD -= 7 - (this.dayRuleSup - thisWeek)\r\n              }\r\n            }\r\n            DD = DD < 10 ? '0' + DD : DD\r\n            goHour: for (let hi = hIdx; hi < hDate.length; hi++) {\r\n              let hh = hDate[hi] < 10 ? '0' + hDate[hi] : hDate[hi]\r\n              if (nMin > mDate[mDate.length - 1]) {\r\n                resetMin()\r\n                if (hi == hDate.length - 1) {\r\n                  resetHour()\r\n                  if (Di == DDate.length - 1) {\r\n                    resetDay()\r\n                    if (Mi == MDate.length - 1) {\r\n                      resetMonth()\r\n                      continue goYear\r\n                    }\r\n                    continue goMonth\r\n                  }\r\n                  continue goDay\r\n                }\r\n                continue\r\n              }\r\n              goMin: for (let mi = mIdx; mi < mDate.length; mi++) {\r\n                let mm = mDate[mi] < 10 ? '0' + mDate[mi] : mDate[mi]\r\n                if (nSecond > sDate[sDate.length - 1]) {\r\n                  resetSecond()\r\n                  if (mi == mDate.length - 1) {\r\n                    resetMin()\r\n                    if (hi == hDate.length - 1) {\r\n                      resetHour()\r\n                      if (Di == DDate.length - 1) {\r\n                        resetDay()\r\n                        if (Mi == MDate.length - 1) {\r\n                          resetMonth()\r\n                          continue goYear\r\n                        }\r\n                        continue goMonth\r\n                      }\r\n                      continue goDay\r\n                    }\r\n                    continue goHour\r\n                  }\r\n                  continue\r\n                }\r\n                goSecond: for (let si = sIdx; si <= sDate.length - 1; si++) {\r\n                  let ss = sDate[si] < 10 ? '0' + sDate[si] : sDate[si]\r\n                  if (MM !== '00' && DD !== '00') {\r\n                    resultArr.push(YY + '-' + MM + '-' + DD + ' ' + hh + ':' + mm + ':' + ss)\r\n                    nums++\r\n                  }\r\n                  if (nums == 5) break goYear\r\n                  if (si == sDate.length - 1) {\r\n                    resetSecond()\r\n                    if (mi == mDate.length - 1) {\r\n                      resetMin()\r\n                      if (hi == hDate.length - 1) {\r\n                        resetHour()\r\n                        if (Di == DDate.length - 1) {\r\n                          resetDay()\r\n                          if (Mi == MDate.length - 1) {\r\n                            resetMonth()\r\n                            continue goYear\r\n                          }\r\n                          continue goMonth\r\n                        }\r\n                        continue goDay\r\n                      }\r\n                      continue goHour\r\n                    }\r\n                    continue goMin\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (resultArr.length == 0) {\r\n        this.resultList = ['没有达到条件的结果！']\r\n      } else {\r\n        this.resultList = resultArr\r\n        if (resultArr.length !== 5) {\r\n          this.resultList.push('最近100年内只有上面' + resultArr.length + '条结果！')\r\n        }\r\n      }\r\n      this.isShow = true\r\n    },\r\n    getIndex(arr, value) {\r\n      if (value <= arr[0] || value > arr[arr.length - 1]) {\r\n        return 0\r\n      } else {\r\n        for (let i = 0; i < arr.length - 1; i++) {\r\n          if (value > arr[i] && value <= arr[i + 1]) {\r\n            return i + 1\r\n          }\r\n        }\r\n      }\r\n    },\r\n    getYearArr(rule, year) {\r\n      this.dateArr[5] = this.getOrderArr(year, year + 100)\r\n      if (rule !== undefined) {\r\n        if (rule.indexOf('-') >= 0) {\r\n          this.dateArr[5] = this.getCycleArr(rule, year + 100, false)\r\n        } else if (rule.indexOf('/') >= 0) {\r\n          this.dateArr[5] = this.getAverageArr(rule, year + 100)\r\n        } else if (rule !== '*') {\r\n          this.dateArr[5] = this.getAssignArr(rule)\r\n        }\r\n      }\r\n    },\r\n    getMonthArr(rule) {\r\n      this.dateArr[4] = this.getOrderArr(1, 12)\r\n      if (rule.indexOf('-') >= 0) {\r\n        this.dateArr[4] = this.getCycleArr(rule, 12, false)\r\n      } else if (rule.indexOf('/') >= 0) {\r\n        this.dateArr[4] = this.getAverageArr(rule, 12)\r\n      } else if (rule !== '*') {\r\n        this.dateArr[4] = this.getAssignArr(rule)\r\n      }\r\n    },\r\n    getWeekArr(rule) {\r\n      if (this.dayRule == '' && this.dayRuleSup == '') {\r\n        if (rule.indexOf('-') >= 0) {\r\n          this.dayRule = 'weekDay'\r\n          this.dayRuleSup = this.getCycleArr(rule, 7, false)\r\n        } else if (rule.indexOf('#') >= 0) {\r\n          this.dayRule = 'assWeek'\r\n          let matchRule = rule.match(/[0-9]{1}/g)\r\n          this.dayRuleSup = [Number(matchRule[1]), Number(matchRule[0])]\r\n          this.dateArr[3] = [1]\r\n          if (this.dayRuleSup[1] == 7) {\r\n            this.dayRuleSup[1] = 0\r\n          }\r\n        } else if (rule.indexOf('L') >= 0) {\r\n          this.dayRule = 'lastWeek'\r\n          this.dayRuleSup = Number(rule.match(/[0-9]{1,2}/g)[0])\r\n          this.dateArr[3] = [31]\r\n          if (this.dayRuleSup == 7) {\r\n            this.dayRuleSup = 0\r\n          }\r\n        } else if (rule !== '*' && rule !== '?') {\r\n          this.dayRule = 'weekDay'\r\n          this.dayRuleSup = this.getAssignArr(rule)\r\n        }\r\n      }\r\n    },\r\n    getDayArr(rule) {\r\n      this.dateArr[3] = this.getOrderArr(1, 31)\r\n      this.dayRule = ''\r\n      this.dayRuleSup = ''\r\n      if (rule.indexOf('-') >= 0) {\r\n        this.dateArr[3] = this.getCycleArr(rule, 31, false)\r\n        this.dayRuleSup = 'null'\r\n      } else if (rule.indexOf('/') >= 0) {\r\n        this.dateArr[3] = this.getAverageArr(rule, 31)\r\n        this.dayRuleSup = 'null'\r\n      } else if (rule.indexOf('W') >= 0) {\r\n        this.dayRule = 'workDay'\r\n        this.dayRuleSup = Number(rule.match(/[0-9]{1,2}/g)[0])\r\n        this.dateArr[3] = [this.dayRuleSup]\r\n      } else if (rule.indexOf('L') >= 0) {\r\n        this.dayRule = 'lastDay'\r\n        this.dayRuleSup = 'null'\r\n        this.dateArr[3] = [31]\r\n      } else if (rule !== '*' && rule !== '?') {\r\n        this.dateArr[3] = this.getAssignArr(rule)\r\n        this.dayRuleSup = 'null'\r\n      } else if (rule == '*') {\r\n        this.dayRuleSup = 'null'\r\n      }\r\n    },\r\n    getHourArr(rule) {\r\n      this.dateArr[2] = this.getOrderArr(0, 23)\r\n      if (rule.indexOf('-') >= 0) {\r\n        this.dateArr[2] = this.getCycleArr(rule, 24, true)\r\n      } else if (rule.indexOf('/') >= 0) {\r\n        this.dateArr[2] = this.getAverageArr(rule, 23)\r\n      } else if (rule !== '*') {\r\n        this.dateArr[2] = this.getAssignArr(rule)\r\n      }\r\n    },\r\n    getMinArr(rule) {\r\n      this.dateArr[1] = this.getOrderArr(0, 59)\r\n      if (rule.indexOf('-') >= 0) {\r\n        this.dateArr[1] = this.getCycleArr(rule, 60, true)\r\n      } else if (rule.indexOf('/') >= 0) {\r\n        this.dateArr[1] = this.getAverageArr(rule, 59)\r\n      } else if (rule !== '*') {\r\n        this.dateArr[1] = this.getAssignArr(rule)\r\n      }\r\n    },\r\n    getSecondArr(rule) {\r\n      this.dateArr[0] = this.getOrderArr(0, 59)\r\n      if (rule.indexOf('-') >= 0) {\r\n        this.dateArr[0] = this.getCycleArr(rule, 60, true)\r\n      } else if (rule.indexOf('/') >= 0) {\r\n        this.dateArr[0] = this.getAverageArr(rule, 59)\r\n      } else if (rule !== '*') {\r\n        this.dateArr[0] = this.getAssignArr(rule)\r\n      }\r\n    },\r\n    getOrderArr(min, max) {\r\n      let arr = []\r\n      for (let i = min; i <= max; i++) {\r\n        arr.push(i)\r\n      }\r\n      return arr\r\n    },\r\n    getAssignArr(rule) {\r\n      let arr = []\r\n      let assiginArr = rule.split(',')\r\n      for (let i = 0; i < assiginArr.length; i++) {\r\n        arr[i] = Number(assiginArr[i])\r\n      }\r\n      arr.sort(this.compare)\r\n      return arr\r\n    },\r\n    getAverageArr(rule, limit) {\r\n      let arr = []\r\n      let agArr = rule.split('/')\r\n      let min = Number(agArr[0])\r\n      let step = Number(agArr[1])\r\n      while (min <= limit) {\r\n        arr.push(min)\r\n        min += step\r\n      }\r\n      return arr\r\n    },\r\n    getCycleArr(rule, limit, status) {\r\n      let arr = []\r\n      let cycleArr = rule.split('-')\r\n      let min = Number(cycleArr[0])\r\n      let max = Number(cycleArr[1])\r\n      if (min > max) {\r\n        max += limit\r\n      }\r\n      for (let i = min; i <= max; i++) {\r\n        let add = 0\r\n        if (status == false && i % limit == 0) {\r\n          add = limit\r\n        }\r\n        arr.push(Math.round((i % limit) + add))\r\n      }\r\n      arr.sort(this.compare)\r\n      return arr\r\n    },\r\n    compare(value1, value2) {\r\n      if (value2 - value1 > 0) {\r\n        return -1\r\n      } else {\r\n        return 1\r\n      }\r\n    },\r\n    formatDate(value, type) {\r\n      let time = typeof value == 'number' ? new Date(value) : value\r\n      let Y = time.getFullYear()\r\n      let M = time.getMonth() + 1\r\n      let D = time.getDate()\r\n      let h = time.getHours()\r\n      let m = time.getMinutes()\r\n      let s = time.getSeconds()\r\n      let week = time.getDay()\r\n      if (type == undefined) {\r\n        return (\r\n          Y +\r\n          '-' +\r\n          (M < 10 ? '0' + M : M) +\r\n          '-' +\r\n          (D < 10 ? '0' + D : D) +\r\n          ' ' +\r\n          (h < 10 ? '0' + h : h) +\r\n          ':' +\r\n          (m < 10 ? '0' + m : m) +\r\n          ':' +\r\n          (s < 10 ? '0' + s : s)\r\n        )\r\n      } else if (type == 'week') {\r\n        return week + 1\r\n      }\r\n    },\r\n    checkDate(value) {\r\n      let time = new Date(value)\r\n      let format = this.formatDate(time)\r\n      return value === format\r\n    }\r\n  },\r\n  watch: {\r\n    ex: 'expressionChange'\r\n  },\r\n  props: ['ex'],\r\n  mounted: function () {\r\n    this.expressionChange()\r\n  }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}